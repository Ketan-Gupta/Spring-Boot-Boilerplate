TODO:
---

Spring Boot
---

1. The boilerplate run function in main class returns the ConfigurableApplicationContext.
2. That context object can be used to procure any beans by simple specifying the classname.

Spring Autowire Concept
---

1. JVM has a spring container, that consists of objects aka Spring Beans.
2. When a bean is created, it can be placed under different scopes: singleton or prototype for stand alone projects.
3. We also have request and session for web based projects.
4. The run method in main class, when ran, initializes the spring container.
5. At initialization, spring creates objects of classes and loads them into the container.
6. However, it will not create objects of all the classes, but instead create objects of only those classes that are annotated
with @Component i.e officially classified as a spring bean.
7. The moment getBean is called with Parent.class as the argument, spring will look into the container for Parent type object,
and if found will return it i.e it will inject the object of Parent into the main class.
8. Remember even if the bean is not requested, but it is marked as a component, the object will be created as soon as the
application context is loaded on run method, where spring will start creating and loading objects into the container.
9. BTW, the default design pattern used is Singleton Pattern.
10. In our project, if parent is beaned(getBean(Parent.class)) twice, then in that case too, spring at run method will create and load
only one object of Parent.class because it follows singleton pattern by default.
11. Use case 1: Two different objects of parent.class were procured, different values were set for both of them. For the second 
parent object, spring actually returned the same object from the container that it had returned for the first parent object.
Hence the first and second parent object are actually the same. ( as seen by overriding the value of index from second object to 3,
but printing the index of first object which has now been set to 3 as well, because they are same object.)

12. If Prototype scope is wanted, then the bean should simply be annotated with additional annotation called @scope("prototype")
In scope of prototype, spring does not create objects at run method, It will instead create at and when they are needed.

Hence, when a parent bean was requested, spring created a parent object and put it into container after the request,
and returned it.

When two separate parent objects were requested, spring created two different parent objects after the request, and returned them.

13. In sample use case 2, Injection class has been declared a component with default singleton scope, hence
as soon as run is called, spring will create an object of run and store it into the container.

14. As soon as Injection object is autowired in parent class, the spring containers will make an object and put it into the container
if it is scoped as prototype, or the object will already be there in container in case of default singleton scope.

15. After the completion of the above step, the object will be searched from the spring container, picked up and 
injected into the parent class. i.e dependency injection.

16. The whole searching is done by the class type and not name. The name of the object is always the name of the class but
with first letter small. If autowiring has to be done by name, @Qualifier can be used to pick the object with the name itself.

17. @Component taken a argument that can change the default name of the object that spring creates.
